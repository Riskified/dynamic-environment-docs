"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[61],{5760:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=s(5893),t=s(1151);const r={sidebar_label:"Technical Overview",sidebar_position:1},a="Technical Overview",o={id:"advanced/technical-overview",title:"Technical Overview",description:"Dynamic Environment leverages Istio's mesh capabilities to launch custom versions of",source:"@site/docs/advanced/technical-overview.md",sourceDirName:"advanced",slug:"/advanced/technical-overview",permalink:"/dynamic-environment-docs/next/advanced/technical-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/Riskified/dynamic-environment-docs/edit/main/docs/advanced/technical-overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Technical Overview",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Running Sample",permalink:"/dynamic-environment-docs/next/getting-started/running"},next:{title:"Tips and Tricks",permalink:"/dynamic-environment-docs/next/advanced/tips-and-tricks"}},l={},c=[{value:"Base Elements",id:"base-elements",level:2},{value:"Terminology",id:"terminology",level:3},{value:"IstioMatches",id:"istiomatches",level:3},{value:"Subsets",id:"subsets",level:3},{value:"Consumers",id:"consumers",level:3},{value:"Cleanup",id:"cleanup",level:3},{value:"Status Explained",id:"status-explained",level:3},{value:"Workflows, Events, etc",id:"workflows-events-etc",level:2},{value:"Getting Notified About Modifications in Resources We Control",id:"getting-notified-about-modifications-in-resources-we-control",level:3},{value:"How Virtual Services Are Handled",id:"how-virtual-services-are-handled",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"technical-overview",children:"Technical Overview"}),"\n",(0,i.jsxs)(n.p,{children:["Dynamic Environment leverages ",(0,i.jsx)(n.a,{href:"https://istio.io/",children:(0,i.jsx)(n.em,{children:"Istio"})}),"'s mesh capabilities to launch custom versions of\ndeployments and adds special routing based on HTTP request headers or source labels."]}),"\n",(0,i.jsx)(n.h2,{id:"base-elements",children:"Base Elements"}),"\n",(0,i.jsxs)(n.p,{children:["We use the following steps to set up a ",(0,i.jsx)(n.em,{children:"DynamicEnvironment"}),":"]}),"\n",(0,i.jsx)(n.h3,{id:"terminology",children:"Terminology"}),"\n",(0,i.jsx)(n.p,{children:"In addition to the fundamental elements described below, here are some key terms used throughout\nthis section to prevent confusion:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"service-host"}),": This is the hostname (short or fully qualified) used to access a service."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"DynamicEnv"}),": This is the type (",(0,i.jsx)(n.em,{children:"Kind"}),") of the custom resource."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"istiomatches",children:"IstioMatches"}),"\n",(0,i.jsxs)(n.p,{children:["IstioMatches corresponds to a subset of ",(0,i.jsx)(n.a,{href:"https://istio.io/latest/docs/reference/config/networking/virtual-service/#HTTPMatchRequest",children:"Istio's HTTPMatchRequest"})," (specifically ",(0,i.jsx)(n.em,{children:"headers"}),"\nand ",(0,i.jsx)(n.em,{children:"source labels"}),"). Currently, ",(0,i.jsx)(n.em,{children:"DynamicEnvironment"})," IstioMatches are translated to\nHTTPMatchRequest as follows:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All headers are grouped into a single HTTPMatchRequest."}),"\n",(0,i.jsx)(n.li,{children:"All source labels are grouped into a single HTTPMatchRequest."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"So, if you have the following IstioMatches object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"[ ... ]\nspec:\n  istioMatches:\n    - headers:\n        end-user:\n    - sourceLabels:\n        end-user: json\n  [ ... ]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will produce the following ",(0,i.jsx)(n.em,{children:"VirtualService"})," HTTP matches:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"[ ... ]\nspec:\n  http:\n    - match:\n        - headers:\n            end-user:\n              prefix: jason\n      route:\n        - destination:\n            [ ... ]\n    - match:\n        - sourceLabels:\n            end-user: json\n      route:\n        - destination:\n            [ ... ]\n    - route:\n        - destination:\n            [ ... ]\n  [ ... ]\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"DynamicEnvironment"})," does not provide provisions to forward headers or source labels. It's the\ntested application's responsibility to forward headers if needed."]})}),"\n",(0,i.jsx)(n.h3,{id:"subsets",children:"Subsets"}),"\n",(0,i.jsxs)(n.p,{children:["Subsets are named after ",(0,i.jsx)(n.em,{children:"Istio"}),"'s subsets, but they are not identical; they are conceptually\nsimilar (representing a subset of service endpoints corresponding to a specific custom version)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We identify the deployment we want to override based on the ",(0,i.jsx)(n.em,{children:"namespace"})," / ",(0,i.jsx)(n.em,{children:"name"})," provided in the\n",(0,i.jsx)(n.em,{children:"DynamicEnv"})," manifest. We then clone it using\nthe ",(0,i.jsx)(n.a,{href:"/dynamic-environment-docs/next/references/crd#subset",children:"provided overrides"})," (with minor updates, e.g., setting the\nversion)."]}),"\n",(0,i.jsx)(n.li,{children:"We identify the services that use this deployment, so we have a list of service-hosts that point\nto the said deployment (there could be more than a single service)."}),"\n",(0,i.jsxs)(n.li,{children:["For each of the service-hosts, we identify the ",(0,i.jsx)(n.a,{href:"https://istio.io/latest/docs/reference/config/networking/destination-rule/",children:(0,i.jsx)(n.em,{children:"Destination Rule"})})," that handles the default\nversion. We clone it using the custom version."]}),"\n",(0,i.jsxs)(n.li,{children:["The handling of virtual services is explained in ",(0,i.jsx)(n.a,{href:"#how-virtualservices-are-handled",children:"this section"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Be sure to read the ",(0,i.jsx)(n.a,{href:"#how-virtualservices-are-handled",children:"virtual services"})," section below. It contains\nimportant information regarding our handling of virtual services, including limitations."]})}),"\n",(0,i.jsx)(n.h3,{id:"consumers",children:"Consumers"}),"\n",(0,i.jsxs)(n.p,{children:["Consumers are a special case of ",(0,i.jsx)(n.a,{href:"#subsets",children:"subsets"})," that do not receive traffic. They are a\nconvenient tool for creating a worker that uses a new version, possibly to connect to new services.\nSince they do not accept traffic, we only clone the deployment (similar to subsets) without creating\na ",(0,i.jsx)(n.em,{children:"DestinationRule"})," and ",(0,i.jsx)(n.em,{children:"VirtualService"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,i.jsxs)(n.p,{children:["When deleting a dynamic environment, we remove all the new resources we created and eliminate the\ncustom routes from all the Virtual Services we modified. This is done with the help\nof ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/",children:"finalizers"}),". The deletion task is synchronous and returns only after everything is cleaned up."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Since we use finalizers, the same limitations that apply to deleting any resource with finalizers\nalso apply here."})}),"\n",(0,i.jsx)(n.h3,{id:"status-explained",children:"Status Explained"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/dynamic-environment-docs/next/references/crd#dynamicenvstatus",children:"status"})," is used for both conveying the status of the resource and for the internal management\nof resources."]}),"\n",(0,i.jsxs)(n.p,{children:["The most significant fields for understanding the status of a ",(0,i.jsx)(n.em,{children:"DynamicEnv"})," resource are:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"state"}),": This field shows the calculated summary of all resources managed by this resource, such\nas ",(0,i.jsx)(n.em,{children:"running"}),", ",(0,i.jsx)(n.em,{children:"processing"}),", or ",(0,i.jsx)(n.em,{children:"degraded"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"totalCount"})," and ",(0,i.jsx)(n.code,{children:"totalReady"}),": These fields display the total number of subsets / consumers in\nthis resource and how many of them are ready."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For troubleshooting, you can delve deeper into each of the ",(0,i.jsx)(n.em,{children:"subsets"})," or ",(0,i.jsx)(n.em,{children:"consumers"})," statuses. Here\nis a partial example of a healthy subset (subset names are uniquely generated based on the original\ndeployment name and namespace):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"subsetsStatus:\n  status-updates/details:\n    deployment:\n      name: details-default-dynamicenv-status-updates\n      namespace: status-updates\n      status: running\n    destinationRule:\n      - name: details-default-dynamicenv-status-updates\n        namespace: status-updates\n        status: running\n    virtualServices:\n      - name: details\n        namespace: status-updates\n        status: running\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For deployments with multiple service-hosts (more than a single service pointing to a single\ndeployment), there could be a situation where a specific service-host does not have an active\n",(0,i.jsx)(n.em,{children:"DestinationRule"})," or ",(0,i.jsx)(n.em,{children:"VirtualService"}),". We do not treat this as an error as long as the service is\naccessible from at least one service-host."]})}),"\n",(0,i.jsxs)(n.p,{children:["The following example shows a subset in which one of the service-host's ",(0,i.jsx)(n.em,{children:"DestinationRule"})," is\nmissing. Note the ",(0,i.jsx)(n.code,{children:"ignored-missing-destination-rule"})," status on one of the ",(0,i.jsx)(n.em,{children:"DestinationRule"}),"'s status\nfields (The state is still ",(0,i.jsx)(n.code,{children:"running"})," because one service-host - ",(0,i.jsx)(n.code,{children:"details"})," - is accessible):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"[ ... ]\nstatus:\n  state: ready\n  subsetsStatus:\n    multiple-services-per-deployment/details:\n      deployment:\n        name: details-default-dynamicenv-multiple-services-per-deploym\n        namespace: multiple-services-per-deployment\n        status: running\n      destinationRules:\n        - name: details-default-dynamicenv-multiple-services-per-deploym-details\n          namespace: multiple-services-per-deployment\n          status: running\n        - name: details-default-dynamicenv-multiple-services-per-deploym-details-alt\n          namespace: multiple-services-per-deployment\n          status: ignored-missing-destination-rule\n      virtualServices:\n        - name: details\n          namespace: multiple-services-per-deployment\n          status: running\n  totalCount: 1\n  totalReady: 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The next example shows a subset that has two services. One has a missing ",(0,i.jsx)(n.em,{children:"DestinationRule"})," for one\nof the service-hosts, and the other has a missing ",(0,i.jsx)(n.em,{children:"VirtualService"})," on the other service-host. This\ncauses the subset to be identified as ",(0,i.jsx)(n.code,{children:"degraded"})," because the service is not accessible via any of\nthe service-hosts (note the error in the ",(0,i.jsx)(n.code,{children:"subsetErrors"})," section and\nthe ",(0,i.jsx)(n.code,{children:"ignored-missing-destination-rule"})," status on one of the destination rules):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"[ ... ]\nstatus:\n  state: degraded\n  subsetsStatus:\n    multiple-services-scenarios-no-working-single-host/details:\n      deployment:\n        name: details-default-dynamicenv-multiple-services-scenarios-n\n        namespace: multiple-services-scenarios-no-working-single-host\n        status: running\n      destinationRules:\n        - name: details-default-dynamicenv-multiple-services-scenarios-n-details\n          namespace: multiple-services-scenarios-no-working-single-host\n          status: ignored-missing-destination-rule\n        - name: details-default-dynamicenv-multiple-services-scenarios-n-details-alt\n          namespace: multiple-services-scenarios-no-working-single-host\n          status: running\n      subsetErrors:\n        subset:\n          - error: Couldn't find common active service hostname across DestinationRules\n              and VirtualServices\n      virtualServices:\n        - name: details\n          namespace: multiple-services-scenarios-no-working-single-host\n          status: running\n  totalCount: 1\n  totalReady: 0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To get a quick status overview of all deployed ",(0,i.jsx)(n.em,{children:"DynamicEnvironment"})," resources, you can run the\nfollowing command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"HOME \u27a4 kubectl get de\nNAME                     STATUS   DESIRED   CURRENT   AGE\ndynamicenv-sample        ready    3         3         3h17m\ndynamicenv-simple-test   ready    1         1         12s\n"})}),"\n",(0,i.jsx)(n.p,{children:"This output shows that all subsets/consumers of each resource are ready."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/dynamic-environment-docs/next/references/crd#dynamicenvstatus",children:"status"})," page contains full details for all fields."]}),"\n",(0,i.jsx)(n.h2,{id:"workflows-events-etc",children:"Workflows, Events, etc"}),"\n",(0,i.jsx)(n.h3,{id:"getting-notified-about-modifications-in-resources-we-control",children:"Getting Notified About Modifications in Resources We Control"}),"\n",(0,i.jsxs)(n.p,{children:["When we create a new ",(0,i.jsx)(n.em,{children:"DynamicEnv"})," custom resource, it triggers a ",(0,i.jsx)(n.a,{href:"https://sdk.operatorframework.io/docs/building-operators/golang/tutorial/#reconcile-loop",children:"reconcile loop"}),".\nEvery time there's an event related to this specific manifest, the reconcile loop is triggered. This\nmeans that every time we update the manifest, the reconcile loop will run. However, this is not the\nonly event that triggers the loop. We create and modify various resources (Deployments,\nDestinationRules, and VirtualServices), and we want to get notified whenever they are modified\n(e.g., deleted by mistake)."]}),"\n",(0,i.jsx)(n.p,{children:'Since we are not limited to a specific namespace when creating/updating resources, we cannot "own"\nthis resource. We have to use other means to get notified when something has changed.'}),"\n",(0,i.jsxs)(n.p,{children:["We use ",(0,i.jsx)(n.a,{href:"https://pkg.go.dev/sigs.k8s.io/controller-runtime/pkg/handler@v0.14.5#EventHandler",children:"event handlers"})," for this purpose. This occurs in the form of an annotation\nadded to the resource. This annotation (",(0,i.jsx)(n.code,{children:"riskified.com/dynamic-environment"}),") triggers the configured\nreconcile loop when it is not empty."]}),"\n",(0,i.jsx)(n.p,{children:"While this behavior is behind the scenes and should not concern you, it's essential to keep in mind\nthe following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If we modify a resource created by ",(0,i.jsx)(n.em,{children:"Dynamic Environment"})," (Deployment/DestinationRule) without\nupdating the ",(0,i.jsx)(n.em,{children:"DynamicEnv"})," resource, these changes will likely be deleted (or may even cause an\nunknown error)."]}),"\n",(0,i.jsx)(n.li,{children:"If you see the above annotation in your resources (e.g., virtual services - these are not created\nby us but they are updated), you'll know why."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-virtual-services-are-handled",children:"How Virtual Services Are Handled"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike the other resources we manage, ",(0,i.jsx)(n.a,{href:"https://istio.io/latest/docs/reference/config/networking/virtual-service/",children:"Virtual services"})," are not created by the operator. When\nwe identify the service-hosts that point to the deployment specified in the ",(0,i.jsx)(n.em,{children:"DynamicEnvironment"}),"'s\nsubset, we loop through all the virtual services to find the ones that handle these service-hosts.\nWe also handle ",(0,i.jsx)(n.a,{href:"https://istio.io/latest/docs/reference/config/networking/virtual-service/#Delegate",children:"delegates"}),". Once identified, we manipulate each of these virtual services\nto contain HTTP routes corresponding to our custom version. We also add an annotation to set the\nvirtual service to receive notifications whenever this virtual service is updated."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Currently, we have a limitation, as we do not support virtual services that handle more than one\nservice-host from the list of identified service-hosts. For example, if our deployment can be\naccessed by both ",(0,i.jsx)(n.code,{children:"myservice"})," and ",(0,i.jsx)(n.code,{children:"myservice-metrics"}),", and there is a single ",(0,i.jsx)(n.em,{children:"VirtualService"})," that\nhandles both of these service-hosts, we would only add a route for the service-host that was\nprocessed first and ignore the second."]})}),"\n",(0,i.jsxs)(n.p,{children:["Upon deletion of the ",(0,i.jsx)(n.em,{children:"DynamicEnvironment"}),", we also clean up our routes from all the virtual\nservices."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var i=s(7294);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);